<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Monitoramento Transamérica</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
:root {
  /* Paleta de cores inspirada no FortiGate/Grafana */
  --primary-bg: #0f1419;
  --secondary-bg: #1a1d23;
  --card-bg: #242933;
  --accent-bg: #2a2f3a;
  --border-color: #3c4043;
  --text-primary: #ffffff;
  --text-secondary: #b8bcc8;
  --text-muted: #8b949e;
  
  /* Cores de status */
  --success: #00d4aa;
  --success-bg: rgba(0, 212, 170, 0.1);
  --warning: #ff9500;
  --warning-bg: rgba(255, 149, 0, 0.1);
  --danger: #ff5722;
  --danger-bg: rgba(255, 87, 34, 0.1);
  --info: #1890ff;
  --info-bg: rgba(24, 144, 255, 0.1);
  --unknown: #6b7280;
  --unknown-bg: rgba(107, 114, 128, 0.1);
  
  /* Cores específicas das empresas */
  --texpo-primary: #A66641;
  --texpo-secondary: #D9B29C;
  --htic-primary: #00d4aa;
  --htic-secondary: #36cfc9;
  
  /* Efeitos */
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  
  --radius: 8px;
  --radius-lg: 12px;
  --transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body { 
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: var(--primary-bg);
  color: var(--text-primary);
  line-height: 1.5;
  font-size: 14px;
  overflow-x: hidden;
}

/* Header */
.header {
  background: var(--secondary-bg);
  border-bottom: 1px solid var(--border-color);
  padding: 16px 24px;
  position: sticky;
  top: 0;
  z-index: 100;
  backdrop-filter: blur(8px);
}

.header-content {
  max-width: 1400px;
  margin: 0 auto;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.header-title {
  display: flex;
  align-items: center;
  gap: 12px;
}

.header-icon {
  width: 32px;
  height: 32px;
  background: linear-gradient(135deg, var(--texpo-primary), var(--htic-primary));
  border-radius: var(--radius);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 16px;
}

.header h1 {
  font-size: 20px;
  font-weight: 600;
  color: var(--text-primary);
}

.header-subtitle {
  font-size: 12px;
  color: var(--text-muted);
  margin-top: 2px;
}

.header-stats {
  display: flex;
  align-items: center;
  gap: 24px;
}

.stat-item {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 12px;
}

.stat-value {
  font-weight: 600;
  color: var(--text-primary);
}

.stat-label {
  color: var(--text-muted);
}

/* Main Container */
.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 24px;
}

/* Dashboard Grid */
.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(420px, 1fr));
  gap: 24px;
  margin-bottom: 24px;
}

/* Company Cards */
.company-card {
  background: var(--card-bg);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-lg);
  overflow: hidden;
  transition: var(--transition);
  box-shadow: var(--shadow);
}

.company-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg);
  border-color: rgba(255, 255, 255, 0.1);
}

.company-header {
  padding: 20px 24px;
  border-bottom: 1px solid var(--border-color);
  position: relative;
  overflow: hidden;
}

.company-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: linear-gradient(90deg, var(--texpo-primary), var(--htic-primary));
}

.company-TEXPO .company-header::before {
  background: linear-gradient(90deg, var(--texpo-primary), var(--texpo-secondary));
}

.company-HTIC .company-header::before {
  background: linear-gradient(90deg, var(--htic-primary), var(--htic-secondary));
}

.company-logo {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 12px;
}

.company-logo img {
  max-width: 200px;
  max-height: 60px;
  object-fit: contain;
  filter: brightness(1.1);
}

.company-name {
  font-size: 18px;
  font-weight: 600;
  text-align: center;
  color: var(--text-primary);
  margin-bottom: 4px;
}

.company-status {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  font-size: 12px;
  color: var(--text-muted);
}

.status-indicator {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: var(--success);
  box-shadow: 0 0 0 2px rgba(0, 212, 170, 0.2);
}

/* Device Categories */
.device-categories {
  padding: 0;
}

.category {
  border-bottom: 1px solid var(--border-color);
}

.category:last-child {
  border-bottom: none;
}

.category-header {
  padding: 16px 24px;
  background: var(--accent-bg);
  border-bottom: 1px solid var(--border-color);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: var(--transition);
  gap: 16px;
}

.category-header:hover {
  background: rgba(255, 255, 255, 0.02);
}

.category-title {
  display: flex;
  align-items: center;
  gap: 12px;
  font-size: 14px;
  font-weight: 500;
  color: var(--text-primary);
}

.category-icon {
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  font-size: 12px;
}

.category-Link .category-icon {
  background: var(--info-bg);
  color: #b100d4;  /* ← Altere para mudar a cor do ícone de Link - var(--info) */
}

.category-Switchs .category-icon {
  background: var(--success-bg); 
  color: #b100d4; /* ← Altere para mudar a cor do ícone de Switchs - var(--success) */
}

.category-Servidores .category-icon {
  background: var(--warning-bg);
  color: #b100d4; /* ← Altere para mudar a cor do ícone de Servidores - var(--warning) */
}

.category-Relógio\ de\ Ponto .category-icon {
  background: rgba(138, 43, 226, 0.1); /* Roxo claro para o fundo */
  color: #8a2be2; /* Roxo para o ícone */
}

.category-stats {
  display: flex;
  align-items: center;
  gap: 16px;
  font-size: 12px;
}

.stat-chip {
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  border-radius: 12px;
  font-weight: 500;
}

.stat-chip.online {
  background: var(--success-bg);
  color: var(--success);
}

.stat-chip.offline {
  background: var(--danger-bg);
  color: var(--danger);
}

/* Device List */
.device-list {
  padding: 8px 0;
}

.device-item {
  display: flex;
  align-items: center;
  padding: 12px 24px;
  transition: var(--transition);
  border-left: 3px solid var(--unknown);
}

.device-item:hover {
  background: rgba(255, 255, 255, 0.02);
}

.device-item.online {
  border-left-color: var(--success);
}

.device-item.offline {
  border-left-color: var(--danger);
}

.device-item.unknown {
  border-left-color: var(--unknown);
}

.device-status {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  margin-right: 12px;
  position: relative;
  flex-shrink: 0;
  background: var(--unknown);
  box-shadow: 0 0 0 2px rgba(107, 114, 128, 0.2);
}

.device-status.online {
  background: var(--success);
  box-shadow: 0 0 0 2px rgba(0, 212, 170, 0.2);
}

.device-status.offline {
  background: var(--danger);
  box-shadow: 0 0 0 2px rgba(255, 87, 34, 0.2);
}

.device-status.unknown {
  background: var(--unknown);
  box-shadow: 0 0 0 2px rgba(107, 114, 128, 0.2);
}

.device-info {
  flex: 1;
  min-width: 0;
}

.device-name {
  font-size: 14px;
  font-weight: 500;
  color: var(--text-primary);
  margin-bottom: 2px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.device-host {
  font-size: 12px;
  color: var(--text-muted);
  font-family: 'Monaco', 'Menlo', monospace;
}

.device-metrics {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 2px;
  flex-shrink: 0;
}

.device-latency {
  font-size: 12px;
  font-weight: 600;
  padding: 4px 8px;
  border-radius: 12px;
  min-width: 60px;
  text-align: center;
  background: var(--unknown-bg);
  color: var(--unknown);
}

.device-latency.online {
  background: var(--success-bg);
  color: var(--success);
}

.device-latency.offline {
  background: var(--danger-bg);
  color: var(--danger);
}

.device-latency.unknown {
  background: var(--unknown-bg);
  color: var(--unknown);
}

.device-timestamp {
  font-size: 11px;
  color: var(--text-muted);
}

/* Footer */
.footer {
  background: var(--secondary-bg);
  border-top: 1px solid var(--border-color);
  padding: 16px 24px;
  margin-top: 40px;
}

.footer-content {
  max-width: 1400px;
  margin: 0 auto;
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-size: 12px;
  color: var(--text-muted);
}

.footer-status {
  display: flex;
  align-items: center;
  gap: 8px;
}

.status-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: var(--success);
}

/* Indicador de Loading Discreto */
.loading-indicator {
  display: inline-block;
  width: 12px;
  height: 12px;
  border: 2px solid var(--border-color);
  border-radius: 50%;
  border-top-color: var(--success);
  animation: spin 1s ease-in-out infinite;
  margin-left: 8px;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.loading-indicator.active {
  opacity: 1;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Responsive Design */
@media (max-width: 768px) {
  .container {
    padding: 16px;
  }
  
  .dashboard-grid {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .header-content {
    flex-direction: column;
    gap: 12px;
    align-items: flex-start;
  }
  
  .header-stats {
    align-self: stretch;
    justify-content: space-between;
  }
  
  .device-item {
    padding: 12px 16px;
  }
  
  .category-header {
    padding: 12px 16px;
  }
}

@media (max-width: 480px) {
  .device-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }
  
  .device-metrics {
    align-items: flex-start;
    flex-direction: row;
    gap: 8px;
  }
}

/* Scrollbar Styling */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: var(--primary-bg);
}

::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--text-muted);
}
</style>
</head>
<body>
<header class="header">
  <div class="header-content">
    <div class="header-title">
      <div class="header-icon">
        <i class="fas fa-chart-line"></i>
      </div>
      <div>
        <h1>Dashboard de Monitoramento Transamérica</h1>
        <div class="header-subtitle">Status de Dispositivos em Tempo Real</div>
      </div>
    </div>
    <div class="header-stats">
      <div class="stat-item">
        <div class="stat-value" id="total-devices">0</div>
        <div class="stat-label">Dispositivos</div>
      </div>
      <div class="stat-item">
        <div class="stat-value" id="online-devices">0</div>
        <div class="stat-label">Online</div>
      </div>
      <div class="stat-item">
        <div class="stat-value" id="offline-devices">0</div>
        <div class="stat-label">Offline</div>
      </div>
    </div>
  </div>
</header>

<main class="container">
  <div id="dashboard" class="dashboard-grid"></div>
</main>

<footer class="footer">
  <div class="footer-content">
    <div class="footer-status">
      <div class="status-dot"></div>
      <span id="footer-text">Monitoramento ativo</span>
      <div class="loading-indicator" id="loading-indicator"></div>
    </div>
    <div id="last-update">Carregando...</div>
  </div>
</footer>

<script>
const API = "http://10.65.0.16:3000/api/ping/bulk";

// === CONFIGURAÇÃO DE DISPOSITIVOS ===
const empresas = {
  TEXPO: {
    Link: [ { name:"Fortegate TEXPO", host:"10.1.0.5" } ],
    Switchs: [ { name:"Sala TI", host:"10.65.0.1" }, { name:"ADM HallC", host:"10.71.0.1" }, { name:"RH - Segurança", host:"10.72.0.1" }],
    Servidores: [ { name:"Photon TEXPO", host:"10.1.1.100" }, { name:"Maquina da TV", host:"10.65.0.60" },{ name:"Maquina BI", host:"10.65.0.4" }]
  },
  HTIC: {
    Link: [ { name:"Fortegate HTIC", host:"10.2.0.5" } ],
    Switchs: [ { name:"Sala TI", host:"10.2.0.1" } ],
    Servidores: [ { name:"Photon HTIC", host:"10.2.1.200" }, { name:"AD_Comandatuba", host:"10.2.1.124" } ],
    "Relógio de Ponto": [ { name:"Relógio RH", host:"10.65.0.200" },{ name:"Relógio Portaria", host:"10.65.0.101" } ]
  }
};

// Logos das empresas
const companyLogos = {
  TEXPO: "Texpo.PNG",
  HTIC: "HTIC.PNG"
};

// Ícones das categorias
const categoryIcons = {
  Link: "fas fa-cloud",
  Switchs: "fas fa-network-wired",
  Servidores: "fas fa-server",
   "Relógio de Ponto": "fas fa-clock"
};

let lastUpdate = new Date();
let totalDevices = 0;
let onlineDevices = 0;
let offlineDevices = 0;
let isInitialized = false;

// Cache de elementos DOM para evitar consultas repetidas
const elementCache = new Map();

function getElement(selector) {
  if (!elementCache.has(selector)) {
    elementCache.set(selector, document.querySelector(selector));
  }
  return elementCache.get(selector);
}

function showLoadingIndicator() {
  const indicator = getElement('#loading-indicator');
  if (indicator) {
    indicator.classList.add('active');
  }
}

function hideLoadingIndicator() {
  const indicator = getElement('#loading-indicator');
  if (indicator) {
    indicator.classList.remove('active');
  }
}

function updateHeaderStats() {
  const totalEl = getElement('#total-devices');
  const onlineEl = getElement('#online-devices');
  const offlineEl = getElement('#offline-devices');
  
  if (totalEl && totalEl.textContent !== totalDevices.toString()) {
    totalEl.textContent = totalDevices;
  }
  if (onlineEl && onlineEl.textContent !== onlineDevices.toString()) {
    onlineEl.textContent = onlineDevices;
  }
  if (offlineEl && offlineEl.textContent !== offlineDevices.toString()) {
    offlineEl.textContent = offlineDevices;
  }
}

function createDeviceElement(device, empresa, tipo) {
  const deviceElement = document.createElement('div');
  // Inicializa com status "unknown" para mostrar indicadores visuais imediatamente
  deviceElement.className = 'device-item unknown';
  deviceElement.setAttribute('data-host', device.host);
  
  deviceElement.innerHTML = `
    <div class="device-status unknown"></div>
    <div class="device-info">
      <div class="device-name">${device.name}</div>
      <div class="device-host">${device.host}</div>
    </div>
    <div class="device-metrics">
      <div class="device-latency unknown">Verificando...</div>
      <div class="device-timestamp">--:--:--</div>
    </div>
  `;
  
  return deviceElement;
}

function updateDeviceElement(deviceElement, result) {
  const isOnline = result && result.alive;
  const currentStatus = deviceElement.classList.contains('online') ? 'online' : 
                       deviceElement.classList.contains('offline') ? 'offline' : 'unknown';
  const newStatus = isOnline ? 'online' : 'offline';
  
  // Atualiza status apenas se mudou
  if (currentStatus !== newStatus) {
    deviceElement.className = `device-item ${newStatus}`;
    
    const statusElement = deviceElement.querySelector('.device-status');
    statusElement.className = `device-status ${newStatus}`;
  }
  
  // Atualiza latência
  const latencyElement = deviceElement.querySelector('.device-latency');
  const newLatency = isOnline ? (result.timeMs ? result.timeMs + "ms" : "Online") : "Offline";
  if (latencyElement.textContent !== newLatency) {
    latencyElement.textContent = newLatency;
    latencyElement.className = `device-latency ${newStatus}`;
  }
  
  // Atualiza timestamp
  const timestampElement = deviceElement.querySelector('.device-timestamp');
  const newTimestamp = new Date().toLocaleTimeString();
  timestampElement.textContent = newTimestamp;
}

function createCategoryElement(tipo, devices, empresa) {
  const categoryElement = document.createElement('div');
  categoryElement.className = `category category-${tipo}`;
  categoryElement.setAttribute('data-tipo', tipo);
  
  const headerElement = document.createElement('div');
  headerElement.className = 'category-header';
  headerElement.innerHTML = `
    <div class="category-title">
      <div class="category-icon">
        <i class="${categoryIcons[tipo]}"></i>
      </div>
      ${tipo}
    </div>
    <div class="category-stats">
      <div class="stat-chip online">
        <i class="fas fa-circle"></i>
        <span class="online-count">0</span>
      </div>
      <div class="stat-chip offline">
        <i class="fas fa-circle"></i>
        <span class="offline-count">0</span>
      </div>
    </div>
  `;
  
  const deviceListElement = document.createElement('div');
  deviceListElement.className = 'device-list';
  
  // Cria elementos dos dispositivos
  devices.forEach(device => {
    const deviceElement = createDeviceElement(device, empresa, tipo);
    deviceListElement.appendChild(deviceElement);
  });
  
  categoryElement.appendChild(headerElement);
  categoryElement.appendChild(deviceListElement);
  
  return categoryElement;
}

function updateCategoryStats(categoryElement, onlineCount, offlineCount) {
  const onlineCountEl = categoryElement.querySelector('.online-count');
  const offlineCountEl = categoryElement.querySelector('.offline-count');
  
  if (onlineCountEl && onlineCountEl.textContent !== onlineCount.toString()) {
    onlineCountEl.textContent = onlineCount;
  }
  if (offlineCountEl && offlineCountEl.textContent !== offlineCount.toString()) {
    offlineCountEl.textContent = offlineCount;
  }
}

function createCompanyCard(empresa) {
  const companyCard = document.createElement('div');
  companyCard.className = `company-card company-${empresa}`;
  companyCard.setAttribute('data-empresa', empresa);
  
  const headerElement = document.createElement('div');
  headerElement.className = 'company-header';
  headerElement.innerHTML = `
    <div class="company-logo">
      <img src="${companyLogos[empresa]}" alt="${empresa}">
    </div>
    <div class="company-name">${empresa === 'TEXPO' ? '' : ''}</div>
    <div class="company-status">
      <div class="status-indicator"></div>
      <span class="company-status-text">0/0 dispositivos online</span>
    </div>
  `;
  
  const categoriesElement = document.createElement('div');
  categoriesElement.className = 'device-categories';
  
  // Cria elementos das categorias
  Object.keys(empresas[empresa]).forEach(tipo => {
    const categoryElement = createCategoryElement(tipo, empresas[empresa][tipo], empresa);
    categoriesElement.appendChild(categoryElement);
  });
  
  companyCard.appendChild(headerElement);
  companyCard.appendChild(categoriesElement);
  
  return companyCard;
}

function updateCompanyStatus(companyCard, onlineCount, totalCount) {
  const statusText = companyCard.querySelector('.company-status-text');
  const newText = `${onlineCount}/${totalCount} dispositivos online`;
  if (statusText && statusText.textContent !== newText) {
    statusText.textContent = newText;
  }
}

function initializeDashboard() {
  if (isInitialized) return;
  
  const container = getElement('#dashboard');
  
  // Cria cards das empresas apenas uma vez
  Object.keys(empresas).forEach(empresa => {
    const companyCard = createCompanyCard(empresa);
    container.appendChild(companyCard);
  });
  
  isInitialized = true;
}

async function check() {
  // Mostra indicador discreto de loading apenas no footer
  showLoadingIndicator();
  
  // Inicializa o dashboard na primeira execução
  initializeDashboard();
  
  // Reset counters
  totalDevices = 0;
  onlineDevices = 0;
  offlineDevices = 0;
  
  // Monta lista de todos os hosts
  const hostsMap = [];
  for (let emp in empresas) {
    for (let tipo in empresas[emp]) {
      empresas[emp][tipo].forEach(d => {
        hostsMap.push({ ...d, empresa: emp, tipo: tipo });
        totalDevices++;
      });
    }
  }

  try {
    const res = await fetch(API, {
      method:"POST",
      headers:{"Content-Type":"application/json"},
      body: JSON.stringify({ hosts: hostsMap.map(h => h.host) })
    });
    const data = await res.json();

    // Atualiza cada empresa
    Object.keys(empresas).forEach(empresa => {
      const companyCard = getElement(`[data-empresa="${empresa}"]`);
      if (!companyCard) return;
      
      let companyOnline = 0;
      let companyTotal = 0;
      
      // Atualiza cada categoria da empresa
      Object.keys(empresas[empresa]).forEach(tipo => {
        const categoryElement = companyCard.querySelector(`[data-tipo="${tipo}"]`);
        if (!categoryElement) return;
        
        let categoryOnline = 0;
        let categoryOffline = 0;
        
        // Atualiza cada dispositivo da categoria
        empresas[empresa][tipo].forEach(device => {
          const deviceElement = categoryElement.querySelector(`[data-host="${device.host}"]`);
          if (!deviceElement) return;
          
          const result = data.results.find(r => r.host === device.host);
          updateDeviceElement(deviceElement, result);
          
          companyTotal++;
          if (result && result.alive) {
            categoryOnline++;
            companyOnline++;
            onlineDevices++;
          } else {
            categoryOffline++;
            offlineDevices++;
          }
        });
        
        // Atualiza estatísticas da categoria
        updateCategoryStats(categoryElement, categoryOnline, categoryOffline);
      });
      
      // Atualiza status da empresa
      updateCompanyStatus(companyCard, companyOnline, companyTotal);
    });
    
    updateHeaderStats();
    lastUpdate = new Date();
    
  } catch (error) {
    console.error("Erro ao buscar dados:", error);
    const container = getElement('#dashboard');
    if (container && !isInitialized) {
      container.innerHTML = `
        <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: var(--text-muted);">
          <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 16px; color: var(--danger);"></i>
          <h3 style="margin-bottom: 8px; color: var(--text-primary);">Erro de conexão</h3>
          <p>Não foi possível conectar ao servidor de monitoramento.</p>
        </div>
      `;
    }
  } finally {
    // Esconde indicador de loading
    hideLoadingIndicator();
  }
}

// Atualizar a cada 5 segundos
setInterval(check, 5000);

// Primeira execução
check();

// Atualizar o footer com informações de tempo
setInterval(() => {
  const footer = getElement('#last-update');
  if (footer) {
    const secondsSinceUpdate = Math.floor((new Date() - lastUpdate) / 1000);
    const secondsToUpdate = 5 - (secondsSinceUpdate % 5);
    footer.innerHTML = `Última atualização: ${lastUpdate.toLocaleTimeString()} | Próxima em ${secondsToUpdate}s`;
  }
}, 1000);
</script>
</body>
</html>
